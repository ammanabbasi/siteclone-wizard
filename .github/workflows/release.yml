name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run tests
      run: pnpm test

    - name: Build project
      run: pnpm build

    - name: Generate changelog
      id: changelog
      run: |
        # Get the tag name
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        
        # Generate changelog from commits since last tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -n "$PREVIOUS_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%h)")
        fi
        
        # Save changelog to file
        echo "## Changes" > CHANGELOG.md
        echo "$CHANGELOG" >> CHANGELOG.md
        echo "changelog_file=CHANGELOG.md" >> $GITHUB_OUTPUT

    - name: Create release archive
      run: |
        # Create a clean build for distribution
        mkdir -p release
        cp -r dist release/ 2>/dev/null || true
        cp package.json release/
        cp README.md release/
        cp LICENSE release/ 2>/dev/null || true
        cp CONTRIBUTING.md release/ 2>/dev/null || true
        
        # Create archive
        cd release
        tar -czf ../siteclone-wizard-${{ steps.changelog.outputs.tag_name }}.tar.gz .
        cd ..
        zip -r siteclone-wizard-${{ steps.changelog.outputs.tag_name }}.zip release/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.changelog.outputs.tag_name }}
        name: Release ${{ steps.changelog.outputs.tag_name }}
        body_path: ${{ steps.changelog.outputs.changelog_file }}
        draft: false
        prerelease: ${{ contains(steps.changelog.outputs.tag_name, '-') }}
        files: |
          siteclone-wizard-${{ steps.changelog.outputs.tag_name }}.tar.gz
          siteclone-wizard-${{ steps.changelog.outputs.tag_name }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update package version
      run: |
        # Extract version from tag (remove 'v' prefix)
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "Updating package.json to version $VERSION"
        npm version $VERSION --no-git-tag-version

    - name: Publish to npm (if configured)
      if: ${{ !contains(steps.changelog.outputs.tag_name, '-') }}
      run: |
        # Only publish non-prerelease versions
        # Uncomment the following line when ready to publish to npm
        # npm publish
        echo "Skipping npm publish (not configured)"
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  docker:
    runs-on: ubuntu-latest
    needs: release
    if: ${{ !contains(github.ref_name, '-') }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max 